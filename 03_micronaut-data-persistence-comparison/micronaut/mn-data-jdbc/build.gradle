plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id 'com.bmuschko.docker-remote-api' version '5.0.0'
}

version "0.1"
group "mn.data.jdbc"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${ lombokVersion }"
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    testAnnotationProcessor "org.projectlombok:lombok:${ lombokVersion }"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.configuration:micronaut-flyway"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "javax.annotation:javax.annotation-api"
    implementation "jakarta.persistence:jakarta.persistence-api:2.2.2"
    implementation "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
    compileOnly "org.projectlombok:lombok:${ lombokVersion }"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    runtimeOnly 'org.postgresql:postgresql:42.2.6'
    //runtimeOnly "io.micronaut.configuration:micronaut-jdbc-tomcat"
    implementation "io.micronaut.configuration:micronaut-jdbc-hikari"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "mx.nxtlab.micronaut.data.jdbc.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
    dependsOn assemble
    destFile = project.file('build/libs/Dockerfile')

    from "adoptopenjdk:11.0.4_11-jre-openj9-0.15.1"
    label(['maintainer': "Raul Estrada <raulestradaa@gmail.com>"])
    copyFile "mn-data-jdbc-${ project.version }-all.jar", '/opt/app.jar'

    exposePort 8080
    entryPoint 'java', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap',
      '-Dcom.sun.management.jmxremote', '-noverify',
      "-Djava.awt.headless=true", "-Xms128m", "-Xmx128m", '-jar', '/opt/app.jar'
}

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.get().asFile.parentFile
    dockerFile = createDockerfile.destFile.get().asFile
    def tag = "nxtlab/mn-data-jdbc:${ project.version }-jre-11-0.4".toLowerCase()
    tags = [tag]
    println "tag: ${ tag }"
}